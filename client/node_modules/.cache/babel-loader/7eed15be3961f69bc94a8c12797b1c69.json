{"ast":null,"code":"var _jsxFileName = \"/Users/justinochoa/Desktop/spotify-react/client/src/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback/lib\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  accessToken,\n  trackUri\n}) => {\n  _s();\n\n  const [play, setPlay] = useState(false);\n  useEffect(() => setPlay(true), [trackUri]);\n  if (!accessToken) return null;\n  return /*#__PURE__*/_jsxDEV(SpotifyPlayer, {\n    token: accessToken,\n    showSaveIcon: true,\n    callback: state => {\n      if (!state.isPlaying) setPlay(false);\n    },\n    play: play,\n    uris: trackUri ? [trackUri] : []\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"jVhLcXDeOrLi5A95zDr62ndrz9E=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/justinochoa/Desktop/spotify-react/client/src/Player.js"],"names":["React","useState","useEffect","SpotifyPlayer","Player","accessToken","trackUri","play","setPlay","state","isPlaying"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;;AAEA,MAAMC,MAAM,GAAG,CAAC;AAAEC,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAD,KAA+B;AAAA;;AAC5C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBP,QAAQ,CAAC,KAAD,CAAhC;AAEAC,EAAAA,SAAS,CAAC,MAAMM,OAAO,CAAC,IAAD,CAAd,EAAsB,CAACF,QAAD,CAAtB,CAAT;AACA,MAAI,CAACD,WAAL,EAAkB,OAAO,IAAP;AAClB,sBACE,QAAC,aAAD;AACE,IAAA,KAAK,EAAEA,WADT;AAEE,IAAA,YAAY,MAFd;AAGE,IAAA,QAAQ,EAAGI,KAAD,IAAW;AACnB,UAAI,CAACA,KAAK,CAACC,SAAX,EAAsBF,OAAO,CAAC,KAAD,CAAP;AACvB,KALH;AAME,IAAA,IAAI,EAAED,IANR;AAOE,IAAA,IAAI,EAAED,QAAQ,GAAG,CAACA,QAAD,CAAH,GAAgB;AAPhC;AAAA;AAAA;AAAA;AAAA,UADF;AAWD,CAhBD;;GAAMF,M;;KAAAA,M;AAkBN,eAAeA,MAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport SpotifyPlayer from \"react-spotify-web-playback/lib\";\n\nconst Player = ({ accessToken, trackUri }) => {\n  const [play, setPlay] = useState(false);\n\n  useEffect(() => setPlay(true), [trackUri]);\n  if (!accessToken) return null;\n  return (\n    <SpotifyPlayer\n      token={accessToken}\n      showSaveIcon\n      callback={(state) => {\n        if (!state.isPlaying) setPlay(false);\n      }}\n      play={play}\n      uris={trackUri ? [trackUri] : []}\n    />\n  );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}